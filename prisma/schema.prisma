// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// Modelo que representa a los usuarios del sistema
/// Almacena información personal y de facturación
model User {
  id                    String       @id @default(cuid())
  email                 String       @unique
  password              String       // Contraseña hasheada
  name                  String
  country               String
  billing_full_name     String?      // Nombre completo para facturación
  billing_phone         String?      // Teléfono para facturación
  billing_tax_id        String?      // Número de identificación fiscal
  billing_address       String?      // Dirección de facturación
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt
  memberships           Membership[]
  reset_token           String?      @db.Text
  reset_token_expires   DateTime?

  @@index([email])
}

/// Modelo que representa las membresías de los usuarios
/// Gestiona las suscripciones y planes de los usuarios
model Membership {
  id                    String   @id @default(cuid())
  user_id              String
  plan_id              String
  status               MembershipStatus
  start_date           DateTime
  end_date             DateTime
  stripe_subscription_id String?
  payment_method       PaymentMethod
  last_check_with_gateway DateTime?
  last_remember_date   DateTime?  // Fecha del último recordatorio enviado
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  user                 User     @relation(fields: [user_id], references: [id])
  plan                 Plan     @relation(fields: [plan_id], references: [id])
  licenses             License[]
  payments             Payment[]

  @@index([user_id])
  @@index([plan_id])
  @@index([stripe_subscription_id])
  @@index([status])
}

/// Modelo que representa las licencias de software
/// Gestiona el acceso y uso de los plugins
model License {
  id            String     @id @default(uuid())
  membership_id String
  status        LicenseStatus
  last_reset    DateTime?  // Fecha del último reset de la licencia
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  membership    Membership @relation(fields: [membership_id], references: [id])
  usages        LicenseUsage[]
  plugins       LicensePlugin[]

  @@index([membership_id])
  @@index([status])
}

/// Modelo que registra el uso de licencias por dominio
/// Permite el seguimiento de dónde se está utilizando cada licencia
model LicenseUsage {
  id            String   @id @default(cuid())
  license_id    String
  domain        String
  first_used_at DateTime @default(now())
  last_used_at  DateTime @updatedAt
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  license       License  @relation(fields: [license_id], references: [id])

  @@index([license_id])
  @@index([domain])
  @@unique([license_id, domain])
}

/// Modelo que asocia plugins específicos a una licencia
/// Permite el control granular de qué plugins puede usar cada licencia
model LicensePlugin {
  id           String   @id @default(cuid())
  license_id   String
  plugin_slug  String
  domain       String
  last_usage   DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  license      License  @relation(fields: [license_id], references: [id])

  @@unique([license_id, plugin_slug, domain])
  @@index([license_id])
  @@index([plugin_slug])
}

/// Modelo que define los planes de suscripción disponibles
/// Incluye precios, características y configuraciones de Stripe
model Plan {
  id              String       @id @default(cuid())
  name            String
  description     String
  price           Float
  currency        String
  interval        PlanInterval
  features        Json        // Array de strings almacenado como JSON
  stripe_price_id String?     @unique
  is_highlighted  Boolean     @default(false)
  savings_text    String?
  is_visible      Boolean     @default(true)
  license_count   Int         @default(1)  // Número de licencias a generar por defecto
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  memberships     Membership[]

  @@index([interval])
}

/// Modelo que gestiona las versiones de los plugins
/// Almacena información sobre archivos y versiones disponibles
model PluginVersion {
  id                String   @id @default(cuid())
  plugin_slug       String
  version           String
  file_name         String
  file_path_server  String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@unique([plugin_slug, version])
  @@index([plugin_slug])
}

/// Modelo que registra los pagos realizados
/// Incluye información de transacciones y estados de pago
model Payment {
  id              String     @id @default(cuid())
  membership_id   String
  amount          Float
  currency        String
  status          PaymentStatus
  payment_method  PaymentMethod
  stripe_invoice_id String?
  bank_name       String?
  currency_rate   Float?
  reference       String?
  invoice_url     String?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  membership      Membership @relation(fields: [membership_id], references: [id])

  @@index([membership_id])
  @@index([status])
  @@index([payment_method])
  @@index([stripe_invoice_id])
  @@index([reference])
}

/// Enums para mejorar la consistencia de los datos
enum MembershipStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum LicenseStatus {
  ACTIVE
  INACTIVE
  REVOKED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  STRIPE
  VENEZUELA
}

enum PlanInterval {
  MONTH
  SEMESTER
  YEAR
} 