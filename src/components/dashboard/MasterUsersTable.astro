---
import { formatDate } from '@/utils/date';
import type { User, Membership, Plan, License } from '@prisma/client';

interface UserWithMemberships extends User {
  memberships: (Membership & {
    plan: Plan;
    licenses: License[];
  })[];
}

interface Props {
  users: UserWithMemberships[];
  currentPage?: number;
  totalPages?: number;
  searchEmail?: string;
  searchName?: string;
  countryFilter?: string;
  countries: { country: string }[];
}

const {
  users,
  currentPage = 1,
  totalPages = 1,
  searchEmail = '',
  searchName = '',
  countryFilter = '',
  countries = []
} = Astro.props;
---

<div class="overflow-x-auto">
  <!-- Barra de búsqueda -->
  <div class="mb-6 bg-white p-4 rounded-lg border border-gray-200">
    <form class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4" method="GET">
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
        <input
          type="text"
          name="email"
          id="email"
          value={searchEmail}
          class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
          placeholder="Buscar por email"
        />
      </div>
      <div>
        <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
        <input
          type="text"
          name="name"
          id="name"
          value={searchName}
          class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
          placeholder="Buscar por nombre"
        />
      </div>
      <div>
        <label for="country" class="block text-sm font-medium text-gray-700 mb-1">País</label>
        <select
          name="country"
          id="country"
          class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
        >
          <option value="">Todos los países</option>
          {countries.map(({ country }) => (
            <option value={country} selected={countryFilter === country}>
              {country === 'VE' ? 'Venezuela' : country}
            </option>
          ))}
        </select>
      </div>
      <div class="flex items-end">
        <button
          type="submit"
          class="w-full rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
        >
          Buscar
        </button>
      </div>
    </form>
  </div>

  <!-- Tabla de usuarios -->
  <div class="bg-white shadow-sm ring-1 ring-gray-900/5 rounded-lg">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Usuario
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            País
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Membresías
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Fecha Registro
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Acciones
          </th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        {users.map((user) => (
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="flex items-center">
                <div class="flex-shrink-0 h-10 w-10">
                  <div class="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
                    <span class="text-sm font-medium text-indigo-800">
                      {user.name.charAt(0).toUpperCase()}
                    </span>
                  </div>
                </div>
                <div class="ml-4">
                  <div class="text-sm font-medium text-gray-900">
                    {user.name}
                  </div>
                  <div class="text-sm text-gray-500">
                    {user.email}
                  </div>
                </div>
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                {user.country === 'VE' ? 'Venezuela' : user.country}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="flex flex-col space-y-1">
                {user.memberships.length > 0 ? (
                  user.memberships.map((membership) => (
                    <div class="flex items-center space-x-2">
                      <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        membership.status === 'ACTIVE'
                          ? 'bg-green-100 text-green-800'
                          : membership.status === 'INACTIVE'
                          ? 'bg-yellow-100 text-yellow-800'
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {membership.plan.name}
                      </span>
                      <span class="text-xs text-gray-500">
                        {membership.licenses.length} licencias
                      </span>
                    </div>
                  ))
                ) : (
                  <span class="text-sm text-gray-400 italic">Sin membresías</span>
                )}
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
              {formatDate(user.created_at)}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
              <div class="flex space-x-3">
                <button
                  class="text-green-600 hover:text-green-900 transition-colors"
                  data-action="impersonate"
                  data-user-id={user.id}
                  data-user-email={user.email}
                  title="Personificar Usuario"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                  </svg>
                </button>
                <button
                  class="text-indigo-600 hover:text-indigo-900 transition-colors"
                  data-action="view-details"
                  data-user-id={user.id}
                  title="Ver Detalles"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                </button>
              </div>
            </td>
          </tr>
        ))}
      </tbody>
    </table>

    {users.length === 0 && (
      <div class="text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-2M4 13h2m13-8-4 4m0 0l-4-4m4 4V3" />
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900">No se encontraron usuarios</h3>
        <p class="mt-1 text-sm text-gray-500">No hay usuarios que coincidan con los filtros aplicados.</p>
      </div>
    )}
  </div>

  <!-- Paginación -->
  {totalPages > 1 && (
    <div class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 mt-6 rounded-lg">
      <div class="flex flex-1 justify-between sm:hidden">
        <button
          class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          data-action="prev-page"
          disabled={currentPage === 1}
        >
          Anterior
        </button>
        <button
          class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          data-action="next-page"
          disabled={currentPage === totalPages}
        >
          Siguiente
        </button>
      </div>
      <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        <div>
          <p class="text-sm text-gray-700">
            Mostrando <span class="font-medium">{((currentPage - 1) * 30) + 1}</span> al{' '}
            <span class="font-medium">{Math.min(currentPage * 30, users.length + ((currentPage - 1) * 30))}</span> de{' '}
            <span class="font-medium">{users.length + ((currentPage - 1) * 30)}</span> usuarios
          </p>
        </div>
        <div>
          <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
            <button
              class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
              data-action="prev-page"
              disabled={currentPage === 1}
            >
              <span class="sr-only">Anterior</span>
              <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" />
              </svg>
            </button>

            {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {
              const pageNum = i + 1;
              return (
                <button
                  class:list={[
                    'relative inline-flex items-center px-4 py-2 text-sm font-semibold ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0',
                    pageNum === currentPage
                      ? 'z-10 bg-indigo-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600'
                      : 'text-gray-900'
                  ]}
                  data-action="goto-page"
                  data-page={pageNum}
                >
                  {pageNum}
                </button>
              );
            })}

            <button
              class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
              data-action="next-page"
              disabled={currentPage === totalPages}
            >
              <span class="sr-only">Siguiente</span>
              <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
              </svg>
            </button>
          </nav>
        </div>
      </div>
    </div>
  )}
</div>

<script>
  // Manejador para personificar usuarios
  document.querySelectorAll('[data-action="impersonate"]').forEach(button => {
    button.addEventListener('click', async () => {
      const userId = button.getAttribute('data-user-id');
      const userEmail = button.getAttribute('data-user-email');

      if (confirm(`¿Estás seguro de que deseas personificar al usuario ${userEmail}?`)) {
        try {
          const response = await fetch('/api/admin/impersonate', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId }),
          });

          if (response.ok) {
            // Redirigir al dashboard del usuario personificado
            window.location.href = '/dashboard';
          } else {
            const { error } = await response.json();
            alert(error || 'Error al personificar usuario');
          }
        } catch (error) {
          console.error('Error al personificar usuario:', error);
          alert('Error al personificar usuario');
        }
      }
    });
  });

  // Manejador para ver detalles de usuario
  document.querySelectorAll('[data-action="view-details"]').forEach(button => {
    button.addEventListener('click', () => {
      const userId = button.getAttribute('data-user-id');
      // Aquí podrías implementar un modal para mostrar detalles del usuario
      console.log('Ver detalles del usuario:', userId);
      alert('Funcionalidad de detalles de usuario por implementar');
    });
  });

  // Manejadores para la paginación
  document.querySelectorAll('[data-action="prev-page"]').forEach(button => {
    button.addEventListener('click', () => {
      const url = new URL(window.location.href);
      const currentPage = parseInt(url.searchParams.get('page') || '1');
      if (currentPage > 1) {
        url.searchParams.set('page', (currentPage - 1).toString());
        window.location.href = url.toString();
      }
    });
  });

  document.querySelectorAll('[data-action="next-page"]').forEach(button => {
    button.addEventListener('click', () => {
      const url = new URL(window.location.href);
      const currentPage = parseInt(url.searchParams.get('page') || '1');
      const totalPages = parseInt(button.closest('[data-total-pages]')?.getAttribute('data-total-pages') || '1');
      if (currentPage < totalPages) {
        url.searchParams.set('page', (currentPage + 1).toString());
        window.location.href = url.toString();
      }
    });
  });

  document.querySelectorAll('[data-action="goto-page"]').forEach(button => {
    button.addEventListener('click', () => {
      const url = new URL(window.location.href);
      const pageNum = button.getAttribute('data-page');
      if (pageNum) {
        url.searchParams.set('page', pageNum);
        window.location.href = url.toString();
      }
    });
  });
</script>
