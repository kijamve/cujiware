---
interface Props {
  membershipId: string;
  licenses: {
    id: string;
    status: string;
    last_reset: Date | null;
  }[];
}

const { membershipId, licenses } = Astro.props;
---

<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="manage-licenses-modal">
  <div class="relative top-20 mx-auto p-5 border w-[600px] shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-medium text-gray-900">Gestionar Licencias</h3>
        <button class="close-modal text-gray-400 hover:text-gray-500">
          <span class="sr-only">Cerrar</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <div class="space-y-6">
        <div>
          <h4 class="text-sm font-medium text-gray-900 mb-4">Acciones Disponibles</h4>
          <div class="grid grid-cols-1 gap-4">
            <button
              class="add-license-btn inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-cuji-blue hover:bg-cuji-dark-blue focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cuji-blue"
              data-membership-id={membershipId}
            >
              Agregar Nueva Licencia
            </button>
          </div>
        </div>

        <div>
          <h4 class="text-sm font-medium text-gray-900 mb-4">Licencias Existentes</h4>
          {licenses.length > 0 ? (
            <div class="space-y-4">
              {licenses.map(license => (
                <div class="border rounded-lg p-4">
                  <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center space-x-3">
                      <span class="font-mono text-sm">{license.id}</span>
                      <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        license.status === 'ACTIVE'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {license.status === 'ACTIVE' ? 'Activa' : 'Inactiva'}
                      </span>
                    </div>
                    <div class="flex space-x-2">
                      {license.status === 'ACTIVE' ? (
                        <button
                          class="deactivate-license-btn inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                          data-license-id={license.id}
                        >
                          Inactivar
                        </button>
                      ) : (
                        <button
                          class="activate-license-btn inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                          data-license-id={license.id}
                        >
                          Activar
                        </button>
                      )}
                      <button
                        class="reset-license-btn inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500"
                        data-license-id={license.id}
                        data-last-reset={license.last_reset?.toISOString()}
                      >
                        Resetear
                      </button>
                      <button
                        class="view-license-details-btn inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-cuji-blue hover:bg-cuji-dark-blue focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cuji-blue"
                        data-license-id={license.id}
                      >
                        Ver Detalles
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p class="text-sm text-gray-500">No hay licencias registradas</p>
          )}
        </div>
      </div>

      <div class="mt-6 text-right">
        <button
          class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 close-modal"
        >
          Cerrar
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  const modal = document.getElementById('manage-licenses-modal');
  const closeButtons = modal?.querySelectorAll('.close-modal');
  const addLicenseBtn = modal?.querySelector('.add-license-btn');
  const deactivateLicenseBtns = modal?.querySelectorAll('.deactivate-license-btn');
  const activateLicenseBtns = modal?.querySelectorAll('.activate-license-btn');
  const resetLicenseBtns = modal?.querySelectorAll('.reset-license-btn');
  const viewLicenseDetailsBtns = modal?.querySelectorAll('.view-license-details-btn');

  closeButtons?.forEach(button => {
    button.addEventListener('click', () => {
      modal?.remove();
    });
  });

  addLicenseBtn?.addEventListener('click', async () => {
    const membershipId = addLicenseBtn.getAttribute('data-membership-id');
    if (!membershipId) return;

    try {
      const response = await fetch(`/api/memberships/${membershipId}/licenses`, {
        method: 'POST',
      });
      if (response.ok) {
        window.location.reload();
      } else {
        const data = await response.json();
        alert(data.message || 'Error al agregar licencia');
      }
    } catch (err) {
      console.error('Error:', err);
      alert('Error al agregar licencia');
    }
  });

  deactivateLicenseBtns?.forEach(button => {
    button.addEventListener('click', async () => {
      const licenseId = button.getAttribute('data-license-id');
      if (!licenseId) return;

      if (!confirm('¿Estás seguro de que deseas inactivar esta licencia?')) return;

      try {
        const response = await fetch(`/api/licenses/${licenseId}/status`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ status: 'INACTIVE' }),
        });
        if (response.ok) {
          window.location.reload();
        } else {
          const data = await response.json();
          alert(data.message || 'Error al inactivar licencia');
        }
      } catch (err) {
        console.error('Error:', err);
        alert('Error al inactivar licencia');
      }
    });
  });

  activateLicenseBtns?.forEach(button => {
    button.addEventListener('click', async () => {
      const licenseId = button.getAttribute('data-license-id');
      if (!licenseId) return;

      try {
        const response = await fetch(`/api/licenses/${licenseId}/status`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ status: 'ACTIVE' }),
        });
        if (response.ok) {
          window.location.reload();
        } else {
          const data = await response.json();
          alert(data.message || 'Error al activar licencia');
        }
      } catch (err) {
        console.error('Error:', err);
        alert('Error al activar licencia');
      }
    });
  });

  resetLicenseBtns?.forEach(button => {
    button.addEventListener('click', async () => {
      const licenseId = button.getAttribute('data-license-id');
      const lastReset = button.getAttribute('data-last-reset');
      if (!licenseId) return;

      if (lastReset) {
        const fifteenDaysAgo = new Date();
        fifteenDaysAgo.setDate(fifteenDaysAgo.getDate() - 15);
        const lastResetDate = new Date(lastReset);

        if (lastResetDate > fifteenDaysAgo) {
          const nextResetDate = new Date(lastResetDate.getTime() + (15 * 24 * 60 * 60 * 1000));
          alert(`Solo puedes resetear una licencia cada 15 días. El próximo reset estará disponible el ${nextResetDate.toLocaleDateString()}`);
          return;
        }
      }

      if (!confirm('¿Estás seguro de que deseas resetear esta licencia? Esto eliminará todos los usos registrados.')) return;

      try {
        const response = await fetch(`/api/licenses/${licenseId}/reset`, {
          method: 'POST',
        });
        if (response.ok) {
          window.location.reload();
        } else {
          const data = await response.json();
          alert(data.message || 'Error al resetear licencia');
        }
      } catch (err) {
        console.error('Error:', err);
        alert('Error al resetear licencia');
      }
    });
  });

  viewLicenseDetailsBtns?.forEach(button => {
    button.addEventListener('click', async () => {
      const licenseId = button.getAttribute('data-license-id');
      if (!licenseId) return;

      try {
        const response = await fetch(`/api/licenses/${licenseId}/details`);
        const data = await response.json();

        if (response.ok) {
          const modalRoot = document.getElementById('modal-root');
          if (modalRoot) {
            const licenseDetailsModal = document.createElement('div');
            licenseDetailsModal.innerHTML = `
              <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
                <div class="relative top-20 mx-auto p-5 border w-[600px] shadow-lg rounded-md bg-white">
                  <div class="mt-3">
                    <div class="flex justify-between items-center mb-4">
                      <h3 class="text-lg font-medium text-gray-900">Detalles de la Licencia</h3>
                      <button class="close-modal text-gray-400 hover:text-gray-500">
                        <span class="sr-only">Cerrar</span>
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                    <div class="space-y-4">
                      ${data.html}
                    </div>
                  </div>
                </div>
              </div>
            `;
            modalRoot.appendChild(licenseDetailsModal);

            const closeButton = licenseDetailsModal.querySelector('.close-modal');
            closeButton?.addEventListener('click', () => {
              licenseDetailsModal.remove();
            });
          }
        } else {
          alert(data.message || 'Error al obtener detalles de la licencia');
        }
      } catch (err) {
        console.error('Error:', err);
        alert('Error al obtener detalles de la licencia');
      }
    });
  });
</script>
