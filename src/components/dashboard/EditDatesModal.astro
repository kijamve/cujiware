---
interface Props {
  membershipId: string;
  currentEndDate: Date;
}

const { membershipId, currentEndDate } = Astro.props;
---

<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="edit-dates-modal">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-medium text-gray-900">Editar Fecha de Vencimiento</h3>
        <button class="close-modal text-gray-400 hover:text-gray-500">
          <span class="sr-only">Cerrar</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <div class="mb-4">
        <label for="end-date" class="block text-sm font-medium text-gray-700">Nueva fecha de vencimiento</label>
        <input
          type="date"
          id="end-date"
          name="end-date"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-cuji-blue focus:ring-cuji-blue sm:text-sm"
          min={new Date().toISOString().split('T')[0]}
          value={currentEndDate.toISOString().split('T')[0]}
        />
      </div>

      <div class="mt-4 text-right">
        <button
          class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 mr-2 close-modal"
        >
          Cancelar
        </button>
        <button
          class="px-4 py-2 bg-cuji-blue text-white rounded hover:bg-cuji-dark-blue save-dates"
          data-membership-id={membershipId}
        >
          Guardar
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  const modal = document.getElementById('edit-dates-modal');
  const closeButtons = modal?.querySelectorAll('.close-modal');
  const saveButton = modal?.querySelector('.save-dates');
  const dateInput = document.getElementById('end-date') as HTMLInputElement;

  closeButtons?.forEach(button => {
    button.addEventListener('click', () => {
      modal?.remove();
    });
  });

  saveButton?.addEventListener('click', async () => {
    const membershipId = saveButton.getAttribute('data-membership-id');
    const newEndDate = dateInput?.value;

    if (!membershipId || !newEndDate) return;

    try {
      const response = await fetch(`/api/memberships/${membershipId}/dates`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ end_date: newEndDate }),
      });

      if (response.ok) {
        window.location.reload();
      } else {
        const data = await response.json();
        alert(data.message || 'Error al actualizar las fechas');
      }
    } catch (err) {
      console.error('Error:', err);
      alert('Error al actualizar las fechas');
    }
  });
</script>
