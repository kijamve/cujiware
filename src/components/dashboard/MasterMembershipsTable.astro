---
import type { Membership } from '@/types/auth';
import EditDatesModal from './EditDatesModal.astro';
import ManageLicensesModal from './ManageLicensesModal.astro';
import LicenseDetailsModal from './LicenseDetailsModal.astro';

interface Props {
  memberships: Membership[];
}

const { memberships } = Astro.props;

// Ordenar membresías por fecha de fin
const sortedMemberships = [...memberships].sort((a, b) => {
  return new Date(b.end_date).getTime() - new Date(a.end_date).getTime();
});
---

<div class="overflow-x-auto">
  <table class="min-w-full divide-y divide-gray-200">
    <thead class="bg-gray-50">
      <tr>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Usuario
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Plan
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Estado
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Fecha Inicio
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Fecha Fin
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Licencias
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Acciones
        </th>
      </tr>
    </thead>
    <tbody class="bg-white divide-y divide-gray-200">
      {sortedMemberships.map((membership) => (
        <tr>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div>
                <div class="text-sm font-medium text-gray-900">
                  {membership.user.name}
                </div>
                <div class="text-sm text-gray-500">
                  {membership.user.email}
                </div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">{membership.plan.name}</div>
            <div class="text-sm text-gray-500">{membership.plan.description}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
              membership.status === 'ACTIVE'
                ? 'bg-green-100 text-green-800'
                : 'bg-red-100 text-red-800'
            }`}>
              {membership.status === 'ACTIVE' ? 'Activa' : 'Cancelada'}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            {new Date(membership.start_date).toLocaleDateString()}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            {new Date(membership.end_date).toLocaleDateString()}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            {membership.licenses.length} / {membership.plan.license_count}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
            <div class="flex space-x-2">
              <button
                class="text-indigo-600 hover:text-indigo-900"
                data-action="edit-dates"
                data-membership-id={membership.id}
                data-end-date={membership.end_date}
              >
                Editar Fechas
              </button>
              <button
                class="text-indigo-600 hover:text-indigo-900"
                data-action="manage-licenses"
                data-membership-id={membership.id}
              >
                Gestionar Licencias
              </button>
              <button
                class="text-indigo-600 hover:text-indigo-900"
                data-action="view-payments"
                data-membership-id={membership.id}
              >
                Ver Pagos
              </button>
            </div>
          </td>
        </tr>
      ))}
    </tbody>
  </table>
</div>

<script>
  // Función para crear y mostrar un modal
  function createModal(content: string) {
    const modal = document.createElement('div');
    modal.innerHTML = content;
    document.body.appendChild(modal);
    return modal;
  }

  // Función para cerrar un modal
  function closeModal(modal: HTMLElement) {
    modal.remove();
  }

  // Manejador para editar fechas
  document.querySelectorAll('[data-action="edit-dates"]').forEach(button => {
    button.addEventListener('click', async () => {
      const membershipId = button.getAttribute('data-membership-id');
      const endDate = button.getAttribute('data-end-date');

      const response = await fetch(`/api/memberships/${membershipId}/dates`);
      const content = await response.text();

      const modal = createModal(content);

      // Agregar manejador para cerrar el modal
      modal.querySelector('[data-action="close"]')?.addEventListener('click', () => {
        closeModal(modal);
      });
    });
  });

  // Manejador para gestionar licencias
  document.querySelectorAll('[data-action="manage-licenses"]').forEach(button => {
    button.addEventListener('click', async () => {
      const membershipId = button.getAttribute('data-membership-id');

      const response = await fetch(`/api/memberships/${membershipId}/licenses`);
      const { licenses } = await response.json();

      const response2 = await fetch(`/api/memberships/${membershipId}/licenses/manage`);
      const content = await response2.text();

      const modal = createModal(content);

      // Agregar manejadores para los botones del modal
      modal.querySelector('[data-action="close"]')?.addEventListener('click', () => {
        closeModal(modal);
      });

      modal.querySelector('[data-action="add-license"]')?.addEventListener('click', async () => {
        try {
          const response = await fetch(`/api/memberships/${membershipId}/licenses`, {
            method: 'POST',
          });

          if (response.ok) {
            window.location.reload();
          } else {
            const { message } = await response.json();
            alert(message);
          }
        } catch (error) {
          console.error('Error al agregar licencia:', error);
          alert('Error al agregar licencia');
        }
      });

      modal.querySelectorAll('[data-action="activate-license"]').forEach(btn => {
        btn.addEventListener('click', async () => {
          const licenseId = btn.getAttribute('data-license-id');
          try {
            const response = await fetch(`/api/licenses/${licenseId}/status`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ status: 'ACTIVE' }),
            });

            if (response.ok) {
              window.location.reload();
            } else {
              const { message } = await response.json();
              alert(message);
            }
          } catch (error) {
            console.error('Error al activar licencia:', error);
            alert('Error al activar licencia');
          }
        });
      });

      modal.querySelectorAll('[data-action="deactivate-license"]').forEach(btn => {
        btn.addEventListener('click', async () => {
          const licenseId = btn.getAttribute('data-license-id');
          try {
            const response = await fetch(`/api/licenses/${licenseId}/status`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ status: 'INACTIVE' }),
            });

            if (response.ok) {
              window.location.reload();
            } else {
              const { message } = await response.json();
              alert(message);
            }
          } catch (error) {
            console.error('Error al desactivar licencia:', error);
            alert('Error al desactivar licencia');
          }
        });
      });

      modal.querySelectorAll('[data-action="reset-license"]').forEach(btn => {
        btn.addEventListener('click', async () => {
          const licenseId = btn.getAttribute('data-license-id');
          if (confirm('¿Estás seguro de que deseas resetear esta licencia? Esto eliminará todos los usos registrados.')) {
            try {
              const response = await fetch(`/api/licenses/${licenseId}/reset`, {
                method: 'POST',
              });

              if (response.ok) {
                window.location.reload();
              } else {
                const { message } = await response.json();
                alert(message);
              }
            } catch (error) {
              console.error('Error al resetear licencia:', error);
              alert('Error al resetear licencia');
            }
          }
        });
      });

      modal.querySelectorAll('[data-action="view-license-details"]').forEach(btn => {
        btn.addEventListener('click', async () => {
          const licenseId = btn.getAttribute('data-license-id');
          try {
            const response = await fetch(`/api/licenses/${licenseId}/details`);
            const content = await response.text();

            const detailsModal = createModal(content);

            detailsModal.querySelector('[data-action="close"]')?.addEventListener('click', () => {
              closeModal(detailsModal);
            });

            detailsModal.querySelector('[data-action="copy-license-id"]')?.addEventListener('click', () => {
              const licenseId = detailsModal.querySelector('[data-license-id]')?.getAttribute('data-license-id');
              if (licenseId) {
                navigator.clipboard.writeText(licenseId);
                alert('ID de licencia copiado al portapapeles');
              }
            });
          } catch (error) {
            console.error('Error al obtener detalles de licencia:', error);
            alert('Error al obtener detalles de licencia');
          }
        });
      });
    });
  });

  // Manejador para ver pagos
  document.querySelectorAll('[data-action="view-payments"]').forEach(button => {
    button.addEventListener('click', async () => {
      const membershipId = button.getAttribute('data-membership-id');

      const response = await fetch(`/api/memberships/${membershipId}/payments/modal`);
      const content = await response.text();

      const modal = createModal(content);

      modal.querySelector('[data-action="close"]')?.addEventListener('click', () => {
        closeModal(modal);
      });
    });
  });
</script>
