---
import type { MembershipWithRelations } from '@/utils/types';
import type { Payment } from '@/types/auth';
import { MEMBERSHIP_STATUS } from '@/constants/status';
import { LicenseStatus } from '@prisma/client';

interface Props {
  memberships: MembershipWithRelations[];
}

const { memberships } = Astro.props;

// Ordenar membresías por fecha de vencimiento
const sortedMemberships = [...memberships].sort((a, b) => {
  return new Date(a.end_date).getTime() - new Date(b.end_date).getTime();
});
---

<div class="overflow-x-auto">
  <table class="min-w-full divide-y divide-gray-200">
    <thead class="bg-gray-50">
      <tr>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Usuario
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Plan
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Estado
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Fecha Inicio
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Fecha Fin
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Licencias
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Acciones
        </th>
      </tr>
    </thead>
    <tbody class="bg-white divide-y divide-gray-200">
      {sortedMemberships.map(membership => (
        <tr>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm font-medium text-gray-900">{membership.user.name}</div>
            <div class="text-sm text-gray-500">{membership.user.email}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">{membership.plan.name}</div>
            <div class="text-sm text-gray-500">{membership.plan.interval}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
              membership.status === MEMBERSHIP_STATUS.ACTIVE
                ? 'bg-green-100 text-green-800'
                : membership.status === MEMBERSHIP_STATUS.CANCELLED
                ? 'bg-red-100 text-red-800'
                : 'bg-yellow-100 text-yellow-800'
            }`}>
              {membership.status}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            {new Date(membership.start_date).toLocaleDateString()}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            {new Date(membership.end_date).toLocaleDateString()}
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">
              {membership.licenses.length} / {membership.plan.license_count}
            </div>
            <div class="text-sm text-gray-500">
              {membership.licenses.filter(l => l.status === 'ACTIVE').length} activas
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
            <button
              class="text-cuji-blue hover:text-cuji-dark-blue mr-3"
              data-action="edit-dates"
              data-membership-id={membership.id}
            >
              Editar Fechas
            </button>
            <button
              class="text-cuji-blue hover:text-cuji-dark-blue mr-3"
              data-action="manage-licenses"
              data-membership-id={membership.id}
            >
              Gestionar Licencias
            </button>
            <button
              class="text-cuji-blue hover:text-cuji-dark-blue"
              data-action="view-payments"
              data-membership-id={membership.id}
            >
              Ver Pagos
            </button>
          </td>
        </tr>
      ))}
    </tbody>
  </table>
</div>

<div id="modal-root"></div>

<script>
  // Manejar edición de fechas
  document.querySelectorAll('[data-action="edit-dates"]').forEach(button => {
    button.addEventListener('click', async () => {
      const membershipId = button.getAttribute('data-membership-id');
      const newEndDate = prompt('Ingrese la nueva fecha de vencimiento (YYYY-MM-DD):');

      if (newEndDate) {
        try {
          const response = await fetch(`/api/memberships/${membershipId}/dates`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ end_date: newEndDate }),
          });

          if (response.ok) {
            window.location.reload();
          } else {
            const data = await response.json();
            alert(data.message || 'Error al actualizar las fechas');
          }
        } catch (err) {
          console.error('Error:', err);
          alert('Error al actualizar las fechas');
        }
      }
    });
  });

  // Manejar gestión de licencias
  document.querySelectorAll('[data-action="manage-licenses"]').forEach(button => {
    button.addEventListener('click', async () => {
      const membershipId = button.getAttribute('data-membership-id');
      const action = prompt('Seleccione una acción:\n1. Agregar licencia\n2. Inactivar licencia\n3. Resetear uso de licencia');

      if (!action) return;

      switch (action) {
        case '1':
          try {
            const response = await fetch(`/api/memberships/${membershipId}/licenses`, {
              method: 'POST',
            });
            if (response.ok) {
              window.location.reload();
            } else {
              const data = await response.json();
              alert(data.message || 'Error al agregar licencia');
            }
          } catch (err) {
            console.error('Error:', err);
            alert('Error al agregar licencia');
          }
          break;

        case '2':
          const licenseId = prompt('Ingrese el ID de la licencia a inactivar:');
          if (licenseId) {
            try {
              const response = await fetch(`/api/licenses/${licenseId}/status`, {
                method: 'PUT',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: 'INACTIVE' }),
              });
              if (response.ok) {
                window.location.reload();
              } else {
                const data = await response.json();
                alert(data.message || 'Error al inactivar licencia');
              }
            } catch (err) {
              console.error('Error:', err);
              alert('Error al inactivar licencia');
            }
          }
          break;

        case '3':
          const licenseToReset = prompt('Ingrese el ID de la licencia a resetear:');
          if (licenseToReset) {
            try {
              const response = await fetch(`/api/licenses/${licenseToReset}/reset`, {
                method: 'POST',
              });
              if (response.ok) {
                window.location.reload();
              } else {
                const data = await response.json();
                alert(data.message || 'Error al resetear licencia');
              }
            } catch (err) {
              console.error('Error:', err);
              alert('Error al resetear licencia');
            }
          }
          break;
      }
    });
  });

  // Manejar visualización de pagos
  document.querySelectorAll('[data-action="view-payments"]').forEach(button => {
    button.addEventListener('click', async () => {
      const membershipId = button.getAttribute('data-membership-id');
      try {
        const response = await fetch(`/api/memberships/${membershipId}/payments`);
        const data = await response.json();

        if (response.ok) {
          const paymentsList = data.payments.map((payment: { created_at: string; amount: number; currency: string; status: string; payment_method: string; reference?: string; invoice_url?: string; }) => `
            <div class="p-4 border-b last:border-b-0">
              <div class="flex justify-between items-center">
                <div>
                  <p class="text-sm text-gray-600">Fecha: ${new Date(payment.created_at).toLocaleDateString()}</p>
                  <p class="text-sm font-medium">Monto: ${payment.amount} ${payment.currency}</p>
                  <p class="text-sm text-gray-600">Estado: ${payment.status}</p>
                  <p class="text-sm text-gray-600">Método: ${payment.payment_method}</p>
                  ${payment.reference ? `<p class="text-sm text-gray-600">Referencia: ${payment.reference}</p>` : ''}
                </div>
                ${payment.invoice_url ? `<a href="${payment.invoice_url}" target="_blank" class="text-cuji-blue hover:text-cuji-dark-blue text-sm">Ver Factura</a>` : ''}
              </div>
            </div>
          `).join('');

          const modal = document.createElement('div');
          modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full';
          modal.innerHTML = `
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
              <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Historial de Pagos</h3>
                <div class="max-h-96 overflow-y-auto">
                  ${paymentsList || '<p class="text-center text-gray-500">No hay pagos registrados</p>'}
                </div>
                <div class="mt-4 text-right">
                  <button class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300" onclick="this.closest('.fixed').remove()">
                    Cerrar
                  </button>
                </div>
              </div>
            </div>
          `;
          document.getElementById('modal-root')?.appendChild(modal);
        } else {
          alert(data.message || 'Error al obtener pagos');
        }
      } catch (err) {
        console.error('Error:', err);
        alert('Error al obtener pagos');
      }
    });
  });
</script>
