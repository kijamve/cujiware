---
import type { Membership } from '@/types/auth';

interface Props {
  memberships: (Membership & {
    user: {
      name: string;
      email: string;
    };
    plan: {
      name: string;
      description: string;
      license_count: number;
    };
    licenses: Array<any>;
  })[];
  currentPage?: number;
  totalPages?: number;
}

const { memberships, currentPage = 1, totalPages = 1 } = Astro.props;
const ITEMS_PER_PAGE = 30;

// Usar los datos ya ordenados de Prisma
const sortedMemberships = memberships;
---

<div class="overflow-x-auto">
  <table class="min-w-full divide-y divide-gray-200">
    <thead class="bg-gray-50">
      <tr>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Usuario
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Plan
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Estado
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Fecha Inicio
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Fecha Fin
        </th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Acciones
        </th>
      </tr>
    </thead>
    <tbody class="bg-white divide-y divide-gray-200">
      {sortedMemberships.map((membership) => (
        <tr>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div>
                <div class="text-sm font-medium text-gray-900">
                  {membership.user.name}
                </div>
                <div class="text-sm text-gray-500">
                  {membership.user.email}
                </div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">{membership.plan.name}</div>
            <div class="text-sm text-gray-500">{membership.plan.description}</div>
            <div class="text-sm text-gray-500">
              Licencias: {membership.licenses.length} / {membership.plan.license_count}
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
              membership.status === 'ACTIVE'
                ? 'bg-green-100 text-green-800'
                : 'bg-red-100 text-red-800'
            }`}>
              {membership.status === 'ACTIVE' ? 'Activa' : 'Cancelada'}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            {new Date(membership.start_date).toLocaleDateString()}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
              (() => {
                const today = new Date();
                const endDate = new Date(membership.end_date);
                const diffDays = Math.floor((endDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));

                if (diffDays < -5) {
                  return 'bg-red-100 text-red-800';
                } else if (diffDays < 0) {
                  return 'bg-yellow-100 text-yellow-800';
                } else {
                  return 'bg-green-100 text-green-800';
                }
              })()
            }">
              {new Date(membership.end_date).toLocaleDateString()}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
            <div class="flex space-x-3">
              <button
                class="text-indigo-600 hover:text-indigo-900"
                data-action="edit-dates"
                data-membership-id={membership.id}
                data-end-date={membership.end_date}
                title="Editar Fechas"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </button>
              <button
                class="text-indigo-600 hover:text-indigo-900"
                data-action="manage-licenses"
                data-membership-id={membership.id}
                title="Gestionar Licencias"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                </svg>
              </button>
              <button
                class="text-indigo-600 hover:text-indigo-900"
                data-action="view-payments"
                data-membership-id={membership.id}
                title="Ver Pagos"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                </svg>
              </button>
            </div>
          </td>
        </tr>
      ))}
    </tbody>
  </table>

  <!-- Paginación -->
  <div class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 mt-4">
    <div class="flex flex-1 justify-between sm:hidden">
      <button
        class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
        data-action="prev-page"
        disabled={currentPage === 1}
      >
        Anterior
      </button>
      <button
        class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
        data-action="next-page"
        disabled={currentPage === totalPages}
      >
        Siguiente
      </button>
    </div>
    <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
      <div>
        <p class="text-sm text-gray-700">
          Mostrando <span class="font-medium">{((currentPage - 1) * ITEMS_PER_PAGE) + 1}</span> a <span class="font-medium">{Math.min(currentPage * ITEMS_PER_PAGE, memberships.length)}</span> de <span class="font-medium">{memberships.length}</span> resultados
        </p>
      </div>
      <div>
        <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
          <button
            class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
            data-action="prev-page"
            disabled={currentPage === 1}
          >
            <span class="sr-only">Anterior</span>
            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" />
            </svg>
          </button>
          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
            <button
              class={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                page === currentPage
                  ? 'z-10 bg-indigo-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600'
                  : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
              }`}
              data-action="go-to-page"
              data-page={page}
            >
              {page}
            </button>
          ))}
          <button
            class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
            data-action="next-page"
            disabled={currentPage === totalPages}
          >
            <span class="sr-only">Siguiente</span>
            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
            </svg>
          </button>
        </nav>
      </div>
    </div>
  </div>
</div>

<script>
  // Función para crear y mostrar un modal
  function createModal(content: string) {
    const modal = document.createElement('div');
    modal.innerHTML = content;
    document.body.appendChild(modal);
    // Bloquear el scroll del body
    document.body.style.overflow = 'hidden';
    return modal;
  }

  // Función para cerrar un modal
  function closeModal(modal: HTMLElement) {
    modal.remove();
    // Restaurar el scroll del body
    document.body.style.overflow = '';
  }

  // Manejador para editar fechas
  document.querySelectorAll('[data-action="edit-dates"]').forEach(button => {
    button.addEventListener('click', async () => {
      const membershipId = button.getAttribute('data-membership-id');
      const endDate = button.getAttribute('data-end-date');

      const response = await fetch(`/api/memberships/${membershipId}/dates`);
      const content = await response.text();

      const modal = createModal(content);

      // Agregar manejador para cerrar el modal
      modal.querySelector('[data-action="close"]')?.addEventListener('click', () => {
        closeModal(modal);
      });

      // Agregar manejador para el formulario
      const form = modal.querySelector('#edit-dates-form');
      form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const endDateInput = form.querySelector('#end-date') as HTMLInputElement;
        if (!endDateInput) return;

        try {
          const response = await fetch(`/api/memberships/${membershipId}/dates`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              end_date: endDateInput.value
            })
          });

          if (response.ok) {
            window.location.reload();
          } else {
            const { message } = await response.json();
            alert(message || 'Error al actualizar las fechas');
          }
        } catch (error) {
          console.error('Error al actualizar fechas:', error);
          alert('Error al actualizar las fechas');
        }
      });
    });
  });

  // Manejador para gestionar licencias
  document.querySelectorAll('[data-action="manage-licenses"]').forEach(button => {
    button.addEventListener('click', async () => {
      const membershipId = button.getAttribute('data-membership-id');

      const response = await fetch(`/api/memberships/${membershipId}/licenses`);
      const { licenses } = await response.json();

      const response2 = await fetch(`/api/memberships/${membershipId}/licenses/manage`);
      const content = await response2.text();

      const modal = createModal(content);

      // Agregar manejadores para los botones del modal
      modal.querySelector('[data-action="close"]')?.addEventListener('click', () => {
        closeModal(modal);
      });

      modal.querySelector('[data-action="add-license"]')?.addEventListener('click', async () => {
        try {
          const response = await fetch(`/api/memberships/${membershipId}/licenses`, {
            method: 'POST',
          });

          if (response.ok) {
            window.location.reload();
          } else {
            const { message } = await response.json();
            alert(message);
          }
        } catch (error) {
          console.error('Error al agregar licencia:', error);
          alert('Error al agregar licencia');
        }
      });

      modal.querySelectorAll('[data-action="activate-license"]').forEach(btn => {
        btn.addEventListener('click', async () => {
          const licenseId = btn.getAttribute('data-license-id');
          try {
            const response = await fetch(`/api/licenses/${licenseId}/status`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ status: 'ACTIVE' }),
            });

            if (response.ok) {
              window.location.reload();
            } else {
              const { message } = await response.json();
              alert(message);
            }
          } catch (error) {
            console.error('Error al activar licencia:', error);
            alert('Error al activar licencia');
          }
        });
      });

      modal.querySelectorAll('[data-action="deactivate-license"]').forEach(btn => {
        btn.addEventListener('click', async () => {
          const licenseId = btn.getAttribute('data-license-id');
          try {
            const response = await fetch(`/api/licenses/${licenseId}/status`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ status: 'INACTIVE' }),
            });

            if (response.ok) {
              window.location.reload();
            } else {
              const { message } = await response.json();
              alert(message);
            }
          } catch (error) {
            console.error('Error al desactivar licencia:', error);
            alert('Error al desactivar licencia');
          }
        });
      });

      modal.querySelectorAll('[data-action="reset-license"]').forEach(btn => {
        btn.addEventListener('click', async () => {
          const licenseId = btn.getAttribute('data-license-id');
          if (confirm('¿Estás seguro de que deseas resetear esta licencia? Esto eliminará todos los usos registrados.')) {
            try {
              const response = await fetch(`/api/licenses/${licenseId}/reset`, {
                method: 'POST',
              });

              if (response.ok) {
                window.location.reload();
              } else {
                const { message } = await response.json();
                alert(message);
              }
            } catch (error) {
              console.error('Error al resetear licencia:', error);
              alert('Error al resetear licencia');
            }
          }
        });
      });

      modal.querySelectorAll('[data-action="view-license-details"]').forEach(btn => {
        btn.addEventListener('click', async () => {
          const licenseId = btn.getAttribute('data-license-id');
          try {
            const response = await fetch(`/api/licenses/${licenseId}/details`);
            const content = await response.text();

            const detailsModal = createModal(content);

            detailsModal.querySelector('[data-action="close"]')?.addEventListener('click', () => {
              closeModal(detailsModal);
            });

            detailsModal.querySelector('[data-action="copy-license-id"]')?.addEventListener('click', () => {
              const licenseId = detailsModal.querySelector('[data-license-id]')?.getAttribute('data-license-id');
              if (licenseId) {
                navigator.clipboard.writeText(licenseId);
                alert('ID de licencia copiado al portapapeles');
              }
            });
          } catch (error) {
            console.error('Error al obtener detalles de licencia:', error);
            alert('Error al obtener detalles de licencia');
          }
        });
      });
    });
  });

  // Manejador para ver pagos
  document.querySelectorAll('[data-action="view-payments"]').forEach(button => {
    button.addEventListener('click', async () => {
      const membershipId = button.getAttribute('data-membership-id');

      const response = await fetch(`/api/memberships/${membershipId}/payments/modal`);
      const content = await response.text();

      const modal = createModal(content);

      modal.querySelector('[data-action="close"]')?.addEventListener('click', () => {
        closeModal(modal);
      });
    });
  });

  // Manejador para la paginación
  document.querySelectorAll('[data-action="prev-page"]').forEach(button => {
    button.addEventListener('click', () => {
      const currentPage = parseInt(new URLSearchParams(window.location.search).get('page') || '1');
      if (currentPage > 1) {
        window.location.href = `?page=${currentPage - 1}`;
      }
    });
  });

  document.querySelectorAll('[data-action="next-page"]').forEach(button => {
    button.addEventListener('click', () => {
      const currentPage = parseInt(new URLSearchParams(window.location.search).get('page') || '1');
      const totalPages = parseInt(document.querySelector('[data-total-pages]')?.getAttribute('data-total-pages') || '1');
      if (currentPage < totalPages) {
        window.location.href = `?page=${currentPage + 1}`;
      }
    });
  });

  document.querySelectorAll('[data-action="go-to-page"]').forEach(button => {
    button.addEventListener('click', () => {
      const page = button.getAttribute('data-page');
      if (page) {
        window.location.href = `?page=${page}`;
      }
    });
  });
</script>
