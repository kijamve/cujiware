---
interface Props {
  activeTab: string;
}

const { activeTab } = Astro.props;
---

<div class="dashboard-tabs">
  <div class="border-b border-gray-200">
    <nav class="-mb-px flex space-x-8" aria-label="Tabs">
      <a
        href="/dashboard_master"
        class:list={[
          'whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm',
          activeTab === 'plugins'
            ? ['border-cuji-blue', 'text-cuji-blue']
            : ['border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300']
        ]}
      >
        Plugins
      </a>
      <a
        href="/dashboard_master/memberships"
        class:list={[
          'whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm',
          activeTab === 'memberships'
            ? ['border-cuji-blue', 'text-cuji-blue']
            : ['border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300']
        ]}
      >
        Membres√≠as
      </a>
    </nav>
  </div>
</div>

<script>
  const tabs = document.querySelectorAll('[data-tab]');
  const contents = {
    plugins: document.getElementById('plugins-content'),
    memberships: document.getElementById('memberships-content')
  } as const;

  type ContentKey = keyof typeof contents;

  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const target = tab.getAttribute('data-tab') as ContentKey;
      if (!target) return;

      // Actualizar estilos de tabs
      tabs.forEach(t => {
        t.classList.remove('border-cuji-blue', 'text-cuji-blue');
        t.classList.add('border-transparent', 'text-gray-500');
      });

      tab.classList.remove('border-transparent', 'text-gray-500');
      tab.classList.add('border-cuji-blue', 'text-cuji-blue');

      // Mostrar/ocultar contenido
      (Object.keys(contents) as ContentKey[]).forEach(key => {
        if (contents[key]) {
          contents[key].classList.toggle('hidden', key !== target);
        }
      });
    });
  });
</script>
