<div id="auth-modal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg p-6 max-w-md w-full">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Iniciar Sesión</h3>
    <form id="auth-form" class="space-y-4" onsubmit="return false;">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Correo electrónico</label>
        <input type="email" name="email" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm">
      </div>
      <div id="password-field" class="hidden">
        <label class="block text-sm font-medium text-gray-700 mb-1">Contraseña</label>
        <input type="password" name="password" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm">
      </div>
      <div id="country-field" class="hidden">
        <label class="block text-sm font-medium text-gray-700 mb-1">País</label>
        <select name="country" id="country-select" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm">
          <option value="">Selecciona tu país</option>
          <option value="VE">Venezuela</option>
          <option value="AR">Argentina</option>
          <option value="BO">Bolivia</option>
          <option value="CL">Chile</option>
          <option value="CO">Colombia</option>
          <option value="CR">Costa Rica</option>
          <option value="DO">República Dominicana</option>
          <option value="EC">Ecuador</option>
          <option value="SV">El Salvador</option>
          <option value="ES">España</option>
          <option value="US">Estados Unidos</option>
          <option value="GT">Guatemala</option>
          <option value="HN">Honduras</option>
          <option value="MX">México</option>
          <option value="NI">Nicaragua</option>
          <option value="PA">Panamá</option>
          <option value="PY">Paraguay</option>
          <option value="PE">Perú</option>
          <option value="PR">Puerto Rico</option>
          <option value="UY">Uruguay</option>
          <option value="VE">Venezuela</option>
          <option value="XX">Otro</option>
        </select>
      </div>
      <div id="billing-type-field" class="hidden">
        <label class="block text-sm font-medium text-gray-700 mb-1">Tipo de factura</label>
        <select name="billing_type" id="billing-type-select" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm">
          <option value="">Selecciona el tipo de factura</option>
          <option value="natural">Persona Natural</option>
          <option value="juridica">Persona Jurídica</option>
        </select>
      </div>
      <div id="billing-fields" class="hidden space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Razon Social</label>
          <input type="text" name="billing_full_name" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">RIF</label>
          <input type="text" name="billing_tax_id_juridico" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm" placeholder="J-123456789-0">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Dirección fiscal</label>
          <input type="text" name="billing_address" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Teléfono Celular (Con WhatsApp preferiblemente para recibir notificaciones)</label>
          <input type="text" name="billing_phone" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm" placeholder="04120001122">
        </div>
      </div>
      <div id="natural-fields" class="hidden space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Nombre y Apellido</label>
          <input type="text" name="name" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Cédula de identidad</label>
          <input type="text" name="billing_tax_id_natural" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm" placeholder="V12345678">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Dirección Corta</label>
          <input type="text" name="billing_address_natural" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Teléfono Celular (Con WhatsApp preferiblemente para recibir notificaciones)</label>
          <input type="text" name="billing_phone_natural" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cuji-blue focus:border-cuji-blue sm:text-sm" placeholder="04120001122">
        </div>
      </div>
      <div class="flex justify-end space-x-3 mt-6">
        <button type="button" id="close-auth-modal" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cuji-blue">
          Cancelar
        </button>
        <button type="submit" id="submit-auth-button" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-cuji-blue hover:bg-cuji-dark-blue focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cuji-blue disabled:opacity-50 disabled:cursor-not-allowed">
          <span id="button-text">Continuar</span>
          <svg id="loading-spinner" class="hidden animate-spin ml-2 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  declare global {
    interface Window {
      openAuthModal: (planId: string) => void;
    }
  }

  const authModal = document.getElementById('auth-modal');
  const authForm = document.getElementById('auth-form');
  const closeAuthModalBtn = document.getElementById('close-auth-modal');
  const submitButton = document.getElementById('submit-auth-button');
  const buttonText = document.getElementById('button-text');
  const loadingSpinner = document.getElementById('loading-spinner');
  const passwordField = document.getElementById('password-field');
  const countryField = document.getElementById('country-field');
  const billingTypeField = document.getElementById('billing-type-field');
  const billingFields = document.getElementById('billing-fields');
  const naturalFields = document.getElementById('natural-fields');
  const countrySelect = document.getElementById('country-select') as HTMLSelectElement;
  const billingTypeSelect = document.getElementById('billing-type-select') as HTMLSelectElement;
  let currentPlanId: string | null = null;

  // Función para abrir el modal
  window.openAuthModal = (planId: string) => {
    console.log('Abriendo modal para plan:', planId);
    currentPlanId = planId;
    authModal?.classList.remove('hidden');
    // Resetear el formulario
    (authForm as HTMLFormElement).reset();
    passwordField?.classList.add('hidden');
    countryField?.classList.add('hidden');
    billingTypeField?.classList.add('hidden');
    billingFields?.classList.add('hidden');
    naturalFields?.classList.add('hidden');
  };

  // Función para cerrar el modal
  const closeAuthModal = () => {
    console.log('Cerrando modal, plan actual:', currentPlanId);
    authModal?.classList.add('hidden');
    // No reseteamos currentPlanId aquí para mantenerlo después del login
  };

  closeAuthModalBtn?.addEventListener('click', () => {
    currentPlanId = null; // Solo reseteamos currentPlanId cuando se cierra manualmente
    closeAuthModal();
  });

  // Cerrar modal al hacer clic fuera
  authModal?.addEventListener('click', (e) => {
    if (e.target === authModal) {
      currentPlanId = null; // Solo reseteamos currentPlanId cuando se cierra manualmente
      closeAuthModal();
    }
  });

  // Manejar cambio de país
  countrySelect?.addEventListener('change', (e) => {
    const value = (e.target as HTMLSelectElement).value;
    if (value === 'VE') {
      billingTypeField?.classList.remove('hidden');
    } else {
      billingTypeField?.classList.add('hidden');
      billingFields?.classList.add('hidden');
      naturalFields?.classList.add('hidden');
      // Quitar required de todos los campos
      const juridicoInputs = billingFields?.querySelectorAll('input');
      const naturalInputs = naturalFields?.querySelectorAll('input');
      juridicoInputs?.forEach(input => input.removeAttribute('required'));
      naturalInputs?.forEach(input => input.removeAttribute('required'));
    }
  });

  // Manejar cambio de tipo de factura
  billingTypeSelect?.addEventListener('change', (e) => {
    const value = (e.target as HTMLSelectElement).value;
    const juridicoInputs = billingFields?.querySelectorAll('input');
    const naturalInputs = naturalFields?.querySelectorAll('input');

    if (value === 'juridica') {
      billingFields?.classList.remove('hidden');
      naturalFields?.classList.add('hidden');
      // Hacer required los campos jurídicos
      juridicoInputs?.forEach(input => input.setAttribute('required', ''));
      // Quitar required de los campos naturales
      naturalInputs?.forEach(input => input.removeAttribute('required'));
    } else if (value === 'natural') {
      billingFields?.classList.add('hidden');
      naturalFields?.classList.remove('hidden');
      // Hacer required los campos naturales
      naturalInputs?.forEach(input => input.setAttribute('required', ''));
      // Quitar required de los campos jurídicos
      juridicoInputs?.forEach(input => input.removeAttribute('required'));
    } else {
      billingFields?.classList.add('hidden');
      naturalFields?.classList.add('hidden');
      // Quitar required de todos los campos
      juridicoInputs?.forEach(input => input.removeAttribute('required'));
      naturalInputs?.forEach(input => input.removeAttribute('required'));
    }
  });

  // Quitar required de todos los campos al inicio
  const juridicoInputs = billingFields?.querySelectorAll('input');
  const naturalInputs = naturalFields?.querySelectorAll('input');
  juridicoInputs?.forEach(input => input.removeAttribute('required'));
  naturalInputs?.forEach(input => input.removeAttribute('required'));

  function validateRIF(rif: string): boolean {
    if (!rif || rif.length < 2) return false;
    
    // Limpiar RIF: solo letras y números
    const cleanRIF = rif.replace(/[^A-Za-z0-9]/g, '').toUpperCase();
    const type = cleanRIF[0];
    const ci = cleanRIF.slice(1);
    
    function ci_to_rif(type: string, ci: string): string | false {
      if (ci.length > 9) return false;

      let count_digits = ci.length;
      if(count_digits == 9) count_digits--;

      const calc = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      const constants = [4, 3, 2, 7, 6, 5, 4, 3, 2];

      if(type == "V") calc[0] = 1;
      else if(type == "E") calc[0] = 2;
      else if(type == "J") calc[0] = 3;
      else if(type == "P") calc[0] = 4;
      else if(type == "G") calc[0] = 5;
      else return false;

      let sum = calc[0] * constants[0];
      let index = constants.length - 1;

      for(let i = count_digits - 1; i >= 0; i--) {
        const digit = calc[index] = parseInt(ci[i]);
        sum += digit*constants[index--];
      }

      let final_digit = sum%11;
      if(final_digit>1) final_digit = 11 - final_digit;

      let final_digit_legal: number = 0;
      if (ci.length == 9) {
        final_digit_legal = parseInt(ci[8]);
        if (final_digit_legal!=final_digit && final_digit_legal!=0) return false;
      }

      calc[9] = (ci.length == 9) ? final_digit_legal : final_digit;

      let rif = type;
      for(let i = 1; i < calc.length; ++i) rif += calc[i];

      return rif;
    }

    const validRIF = ci_to_rif(type, ci);
    return validRIF !== false && validRIF === cleanRIF;
  }

  function validateCedula(cedula: string): boolean {
    // Limpiar cédula: solo letras y números
    const cleanCedula = cedula.replace(/[^A-Za-z0-9]/g, '').toUpperCase();
    
    // Obtener el prefijo y los números
    let prefix = cleanCedula[0];
    let numbers = cleanCedula.slice(1);
    
    // Si no tiene prefijo válido, asumimos que es V
    if (!['V', 'E', 'P'].includes(prefix)) {
      prefix = 'V';
      numbers = cleanCedula;
    }
    
    // Validar que los números estén en el rango correcto
    const numCedula = parseInt(numbers);
    return !isNaN(numCedula) && numCedula >= 100000 && numCedula <= 99999999;
  }

  // Validar RIF al escribir
  const rifInput = document.querySelector('input[name="billing_tax_id_juridico"]') as HTMLInputElement;
  rifInput?.addEventListener('input', (e) => {
    const input = e.target as HTMLInputElement;
    const value = input.value.toUpperCase();
    
    // Formatear automáticamente
    if (value.length > 0) {
      const type = value[0];
      const numbers = value.slice(1).replace(/\D/g, '');
      if (numbers.length > 0) {
        input.value = `${type}-${numbers}`;
      } else {
        input.value = type;
      }
    }
  });

  // Validar cédula al escribir
  const cedulaInput = document.querySelector('input[name="billing_tax_id_natural"]') as HTMLInputElement;
  cedulaInput?.addEventListener('input', (e) => {
    const input = e.target as HTMLInputElement;
    const value = input.value.toUpperCase();
    
    // Formatear automáticamente
    if (value.length > 0) {
      const firstChar = value[0];
      let prefix = '';
      let numbers = '';
      
      // Si el primer carácter es V, E o P, lo usamos como prefijo
      if (['V', 'E', 'P'].includes(firstChar)) {
        prefix = firstChar;
        numbers = value.slice(1).replace(/\D/g, '');
      } else {
        // Si no tiene prefijo válido, asumimos V
        prefix = 'V';
        numbers = value.replace(/\D/g, '');
      }
      
      if (numbers.length > 0) {
        input.value = `${prefix}-${numbers}`;
      } else {
        input.value = prefix;
      }
    }
  });

  // Función para mostrar el estado de carga
  const setLoadingState = (isLoading: boolean) => {
    if (isLoading) {
      submitButton?.setAttribute('disabled', 'true');
      closeAuthModalBtn?.setAttribute('disabled', 'true');
      loadingSpinner?.classList.remove('hidden');
      buttonText!.textContent = 'Procesando...';
    } else {
      submitButton?.removeAttribute('disabled');
      closeAuthModalBtn?.removeAttribute('disabled');
      loadingSpinner?.classList.add('hidden');
      buttonText!.textContent = 'Continuar';
    }
  };

  // Función para validar el formulario antes de enviarlo
  function validateForm(formData: FormData, country: string, billingType: string): boolean {
    if (country === 'VE') {
      if (billingType === 'juridica') {
        const billingFullName = formData.get('billing_full_name');
        const billingTaxId = formData.get('billing_tax_id_juridico');
        const billingAddress = formData.get('billing_address');
        const billingPhone = formData.get('billing_phone') as string;

        if (!billingFullName || !billingTaxId || !billingAddress || !billingPhone) {
          alert('Por favor complete todos los campos de facturación');
          setLoadingState(false);
          return false;
        }

        if (!validateRIF(billingTaxId as string)) {
          alert('El RIF ingresado no es válido');
          setLoadingState(false);
          return false;
        }

        // Validar formato del teléfono móvil venezolano
        const phoneRegex = /^04[12][264][0-9]{7}$/;
        if (!phoneRegex.test(billingPhone)) {
          alert('El número de teléfono debe ser un celular y preferiblemente con WhatsApp para recibir notificaciones.');
          setLoadingState(false);
          return false;
        }
      } else if (billingType === 'natural') {
        const name = formData.get('name');
        const billingTaxId = formData.get('billing_tax_id_natural');
        const billingAddress = formData.get('billing_address_natural');
        const billingPhone = formData.get('billing_phone_natural') as string;

        console.log('Datos del formulario natural:', {
          name,
          billingTaxId,
          billingAddress,
          billingPhone
        });

        if (!name || !billingTaxId || !billingAddress || !billingPhone) {
          console.log('Campos faltantes:', {
            name: !name,
            billingTaxId: !billingTaxId,
            billingAddress: !billingAddress,
            billingPhone: !billingPhone
          });
          alert('Por favor complete todos los campos requeridos');
          setLoadingState(false);
          return false;
        }

        if (!validateCedula(billingTaxId as string)) {
          alert('La cédula ingresada no es válida. Debe contener entre 6 y 8 dígitos numéricos y puede tener prefijo V, E o P.');
          setLoadingState(false);
          return false;
        }

        // Validar formato del teléfono móvil venezolano
        const phoneRegex = /^04[12][264][0-9]{7}$/;
        if (!phoneRegex.test(billingPhone)) {
          alert('El número de teléfono debe ser un celular y preferiblemente con WhatsApp para recibir notificaciones.');
          setLoadingState(false);
          return false;
        }
      }
    }
    return true;
  }

  // Manejar el envío del formulario
  authForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    setLoadingState(true);

    try {
      const formData = new FormData(e.target as HTMLFormElement);
      const email = formData.get('email') as string;
      const password = formData.get('password') as string;
      const country = formData.get('country') as string;
      const billingType = formData.get('billing_type') as string;

      // Si no hay campo de contraseña visible, verificar si el email existe
      if (!passwordField?.classList.contains('hidden')) {
        // Login normal
        const loginData = { 
          email: email.trim(), 
          password: password.trim() 
        };
        console.log('Enviando datos de login:', loginData);
        console.log('Plan actual:', currentPlanId);
        
        try {
          const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(loginData)
          });

          console.log('Respuesta del servidor:', response.status);
          const data = await response.json();
          console.log('Datos de respuesta:', data);

          if (response.ok) {
            console.log('Login exitoso:', data);
            
            // Guardar el token en localStorage
            if (data.token) {
              localStorage.setItem('token', data.token);
              console.log('Token guardado en localStorage:', data.token);
            } else {
              console.error('No se recibió token en la respuesta');
            }
            
            // El token ya se guarda automáticamente en las cookies por el servidor
            console.log('Token guardado en cookies por el servidor');

            // Cerrar el modal
            closeAuthModal();
            
            // Si estamos en la página de cuenta o el planId es 'register', redirigir al dashboard
            if (currentPlanId === 'register' || window.location.pathname === '/mi-cuenta') {
              window.location.href = '/dashboard';
            } else {
              // Esperar a que el modal se cierre
              setTimeout(() => {
                console.log('Buscando botón de compra para el plan:', currentPlanId);
                const buyButton = document.querySelector(`[data-plan-id="${currentPlanId}"]`) as HTMLButtonElement;
                if (buyButton) {
                  console.log('Encontrado botón de compra, haciendo clic...');
                  buyButton.click();
                } else {
                  console.log('No se encontró el botón de compra, redirigiendo a pricing...');
                  window.location.href = '/#pricing';
                }
              }, 100);
            }
          } else {
            alert(data.error || 'Error al iniciar sesión');
          }
        } catch (error) {
          console.error('Error en la petición:', error);
          alert('Error al procesar la solicitud');
        }
      } else if (!countryField?.classList.contains('hidden')) {
        // Registro con contraseña aleatoria
        const registerData: any = { 
          email: email.trim(), 
          country: country.trim()
        };

        // Validar el formulario antes de continuar
        if (!validateForm(formData, country, billingType)) {
          return;
        }

        // Si es Venezuela, agregar datos de facturación según el tipo
        if (country === 'VE') {
          if (billingType === 'juridica') {
            const billingFullName = formData.get('billing_full_name');
            const billingTaxId = formData.get('billing_tax_id_juridico');
            const billingAddress = formData.get('billing_address');
            const billingPhone = formData.get('billing_phone');

            registerData.billing_full_name = billingFullName;
            registerData.billing_tax_id = billingTaxId;
            registerData.billing_address = billingAddress;
            registerData.billing_phone = billingPhone;
          } else if (billingType === 'natural') {
            const name = formData.get('name');
            const billingTaxId = formData.get('billing_tax_id_natural');
            const billingAddress = formData.get('billing_address_natural');
            const billingPhone = formData.get('billing_phone_natural');

            registerData.name = name;
            registerData.billing_tax_id = billingTaxId;
            registerData.billing_address = billingAddress;
            registerData.billing_phone = billingPhone;
          }
        }

        try {
          const response = await fetch('/api/auth/register-with-password', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(registerData)
          });

          const data = await response.json();

          if (response.ok) {
            console.log('Registro exitoso:', data);
            
            // El token ya se guarda automáticamente en las cookies por el servidor
            console.log('Token guardado en cookies por el servidor');

            // Cerrar el modal
            closeAuthModal();
            
            // Si estamos en la página de cuenta o el planId es 'register', redirigir al dashboard
            if (currentPlanId === 'register' || window.location.pathname === '/mi-cuenta') {
              window.location.href = '/dashboard';
            } else {
              // Esperar a que el modal se cierre
              setTimeout(() => {
                console.log('Buscando botón de compra para el plan:', currentPlanId);
                const buyButton = document.querySelector(`[data-plan-id="${currentPlanId}"]`) as HTMLButtonElement;
                if (buyButton) {
                  console.log('Encontrado botón de compra, haciendo clic...');
                  buyButton.click();
                } else {
                  console.log('No se encontró el botón de compra, redirigiendo a pricing...');
                  window.location.href = '/#pricing';
                }
              }, 100);
            }
          } else {
            alert(data.error || 'Error al registrar el usuario');
          }
        } catch (error) {
          console.error('Error en la petición:', error);
          alert('Error al procesar la solicitud');
        }
      } else {
        // Verificar si el email existe
        try {
          const response = await fetch('/api/auth/check-email', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ email: email.trim() })
          });

          const data = await response.json();

          if (data.exists) {
            // Mostrar campo de contraseña
            passwordField?.classList.remove('hidden');
          } else {
            // Mostrar campo de país
            countryField?.classList.remove('hidden');
          }
        } catch (error) {
          console.error('Error en la petición:', error);
          alert('Error al procesar la solicitud');
        }
      }

      // Cuando termines, restaura el estado del botón
      setLoadingState(false);
    } catch (error) {
      console.error('Error:', error);
      setLoadingState(false);
    }
  });
</script> 